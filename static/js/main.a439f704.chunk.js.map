{"version":3,"sources":["components/Tile/Tile.js","components/Socketio.js","components/ChessBoard.js","components/Rules.js","components/Room.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","number","className","image","style","backgroundImage","socket","io","on","board","rules","isAnyPieceBetween","x","y","boardState","type","px","py","prevX","find","p","prevY","isSquareOccupied","isEnPassant","color","direction","enPassant","isOpponent","validMove","Math","abs","xAxis","yAxis","initialBoard","i","push","ChessBoard","newBoard","setPieces","useState","currentPiece","setCurrentPiece","boardX","setGridX","boardY","setGridY","pieces","turn","changeTurn","chessBoardRule","useRef","j","imgUrl","undefined","forEach","length","onMouseDown","e","chessrule","current","target","classList","contains","floor","clientX","offsetLeft","clientWidth","ceil","clientY","offsetTop","clientHeight","position","top","left","selectPiece","onMouseMove","minWidth","minHeight","maxWidth","maxHeight","movePiece","onMouseUp","playerPiece","newPieces","reduce","result","piece","id","window","sessionStorage","getItem","emit","removeProperty","releasePiece","ref","Room","create","gameId","setState","join","setItem","joinRoom","value","state","bind","React","createRef","Fragment","Jumbotron","Button","variant","onClick","this","to","Component","App","basename","location","pathname","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a439f704.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../../index.css'\r\n\r\nexport const Tile = (props) => {\r\n    if(props.number % 2 === 0)\r\n        return (\r\n            <div className=\"tile black-tiles\">\r\n                {props.image && <div style={{backgroundImage: `url(${props.image})`}} className=\"piece\"></div>}\r\n            </div>\r\n        )\r\n    else\r\n        return (\r\n            <div className=\"tile white-tiles\">\r\n                {props.image && <div style={{backgroundImage: `url(${props.image})`}} className=\"piece\"></div>}\r\n            </div>\r\n        )\r\n}","import {io} from 'socket.io-client'\r\nexport const socket = io(\"https://react-chess-backend.herokuapp.com/\")\r\n\r\nsocket.on('updateBoard', board => {\r\n    return board\r\n})\r\n\r\nexport const createRoom = () => {\r\n    let id = \"\"\r\n    socket.emit('createRoom',id) \r\n}\r\n\r\nexport const joinRoom = id => {\r\n    window.sessionStorage.setItem(\"gameId\",id)\r\n    socket.emit('join',id)\r\n    return id\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport { Tile } from './Tile/Tile'\r\nimport {socket} from './Socketio'\r\nimport Rules from './Rules'\r\n\r\nconst rules = new Rules()\r\nconst xAxis = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\r\nconst yAxis = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\r\n\r\nconst initialBoard = []\r\nfor(let i = 0; i < 2; i++){\r\n    let color = (i === 0) ? \"w\" : \"b\"\r\n    let y = (i === 0) ? 0 : 7\r\n    initialBoard.push({image: `img/${color}-king.png`, x: 4, y: y, type: \"king\" , color})\r\n    initialBoard.push({image: `img/${color}-queen.png`, x: 3, y: y , type: \"queen\" , color})\r\n    initialBoard.push({image: `img/${color}-bishop.png`, x: 5, y: y, type: \"bishop\" , color})\r\n    initialBoard.push({image: `img/${color}-bishop.png`, x: 2, y: y, type: \"bishop\" , color})\r\n    initialBoard.push({image: `img/${color}-knight.png`, x: 6, y: y , type: \"knight\" , color})\r\n    initialBoard.push({image: `img/${color}-knight.png`, x: 1, y: y , type: \"knight\", color})\r\n    initialBoard.push({image: `img/${color}-rook.png`, x: 7, y: y , type: \"rook\" , color})\r\n    initialBoard.push({image: `img/${color}-rook.png`, x: 0, y: y , type: \"rook\" , color})\r\n}\r\nfor(let i = 0; i < 9; i++)\r\n    initialBoard.push({image: \"img/b-pawn.png\" , x: i, y: 6 ,type: \"pawn\", color: \"b\"})\r\nfor(let i = 0; i < 9; i++)\r\n    initialBoard.push({image: \"img/w-pawn.png\" , x: i, y: 1,type: \"pawn\" , color: \"w\"})\r\n\r\nexport const ChessBoard = () => {\r\n    socket.on('updateBoard', newBoard => {\r\n        setPieces(newBoard)\r\n    })\r\n    const [currentPiece, setCurrentPiece] = useState(null)\r\n    const [boardX, setGridX] = useState(0)\r\n    const [boardY ,setGridY] = useState(0)\r\n    const [pieces, setPieces] = useState(initialBoard)\r\n    const [turn, changeTurn] = useState(\"w\")\r\n    const chessBoardRule = useRef(null)\r\n    const selectPiece = e => {\r\n        const chessrule = chessBoardRule.current\r\n        if(e.target.classList.contains(\"piece\") && chessrule){\r\n            setGridX(Math.floor((e.clientX - chessrule.offsetLeft)/(chessrule.clientWidth/8)))\r\n            setGridY(Math.abs(Math.ceil((e.clientY - chessrule.offsetTop - 800)/(chessrule.clientWidth/8))))\r\n            const x = e.clientX - e.target.clientWidth/2\r\n            const y = e.clientY - e.target.clientHeight/2\r\n            e.target.style.position = \"absolute\"\r\n            e.target.style.top = `${y}px`\r\n            e.target.style.left = `${x}px`\r\n        }\r\n        setCurrentPiece(e.target)\r\n    }\r\n    \r\n    const movePiece = e => {\r\n        const chessrule = chessBoardRule.current\r\n        if(currentPiece && currentPiece.classList.contains(\"piece\") && chessrule){\r\n            const minWidth = chessrule.offsetLeft\r\n            const minHeight = chessrule.offsetTop\r\n            const maxWidth = chessrule.clientWidth + chessrule.offsetLeft - chessrule.clientWidth/8\r\n            const maxHeight = chessrule.clientHeight + chessrule.offsetTop - chessrule.clientHeight/8\r\n            const x = e.clientX - e.target.clientWidth/2\r\n            const y = e.clientY - e.target.clientHeight/2\r\n            currentPiece.style.position = \"absolute\"\r\n            if(x < minWidth)\r\n                currentPiece.style.left = `${minWidth}px`\r\n            else if (x > maxWidth)\r\n                currentPiece.style.left = `${maxWidth}px`\r\n            else \r\n                currentPiece.style.left = `${x}px`\r\n            if(y < minHeight)\r\n                currentPiece.style.top = `${minHeight}px`\r\n            else if (y > maxHeight) \r\n                currentPiece.style.top = `${maxHeight}px`\r\n            else \r\n                currentPiece.style.top = `${y}px`\r\n        }\r\n    }\r\n    \r\n    const releasePiece = e => {\r\n        const chessrule = chessBoardRule.current\r\n        if(currentPiece && chessrule){\r\n            const x = Math.floor((e.clientX - chessrule.offsetLeft)/(chessrule.clientWidth/8))\r\n            const y = Math.abs(Math.ceil((e.clientY - chessrule.offsetTop - 800)/(chessrule.clientWidth/8)))\r\n            const playerPiece = pieces.find(p => p.x === boardX && p.y === boardY)\r\n            \r\n            if(playerPiece){\r\n                const validMove = rules.validMove(boardX, boardY, x, y, playerPiece.type, playerPiece.color, pieces)\r\n                const enPassant = rules.isEnPassant(boardX, boardY, x, y, playerPiece.type, playerPiece.color, pieces)\r\n                const direction = playerPiece.color === \"w\" ? 1 : -1\r\n                \r\n                if(enPassant && playerPiece.color === turn){\r\n                    const newPieces = pieces.reduce((result, piece) => {\r\n                        if(piece.x === boardX && piece.y === boardY){\r\n                            piece.enPassant = false\r\n                            piece.x = x\r\n                            piece.y = y\r\n                            result.push(piece)\r\n                        }else if(!(piece.x === x && piece.y === y - direction)){\r\n                            if(piece.type === \"pawn\")\r\n                                    piece.enPassant = false\r\n                                result.push(piece)\r\n                        }\r\n                        return result\r\n                    },[])\r\n                    setPieces(newPieces)\r\n                    changeTurn((turn === \"w\") ? \"b\" : \"w\")\r\n                    const id = window.sessionStorage.getItem(\"gameId\")\r\n                    socket.emit('move', id,newPieces)                        \r\n                }else if(validMove && playerPiece.color === turn) {\r\n                        const newPieces = pieces.reduce((result, piece) => {\r\n                            if (piece.y === boardY && piece.x === boardX) {\r\n                                if(Math.abs(boardY - y) === 2 && piece.type === \"pawn\")\r\n                                    piece.enPassant = true\r\n                                else \r\n                                    piece.enPassant = false\r\n                                piece.x = x\r\n                                piece.y = y\r\n                                if(piece.type === \"pawn\" && (piece.y === 0 || piece.y === 7)){\r\n                                    piece.type = \"queen\"\r\n                                    piece.image = `img/${piece.color}-queen.png`\r\n                                }\r\n                                result.push(piece)   \r\n                            }else if(!(piece.x === x && piece.y === y)){\r\n                                if(piece.type === \"pawn\")\r\n                                    piece.enPassant = false\r\n                                result.push(piece)\r\n                            }\r\n                            return result\r\n                        },[])\r\n                        setPieces(newPieces)\r\n                        changeTurn((turn === \"w\") ? \"b\" : \"w\")        \r\n                        const id = window.sessionStorage.getItem(\"gameId\")\r\n                        socket.emit('move', id,newPieces)\r\n                        \r\n                }else{\r\n                    currentPiece.style.position = \"relative\"\r\n                    currentPiece.style.removeProperty(\"top\")\r\n                    currentPiece.style.removeProperty(\"left\")\r\n                }\r\n            }\r\n            setCurrentPiece(null)\r\n        }\r\n    }\r\n\r\n    const board = []\r\n    for(let j = yAxis.length - 1; j >= 0; j--){\r\n        for(let i = 0; i < xAxis.length; i++){\r\n            const number = i + j + 2\r\n            let imgUrl = undefined\r\n            pieces.forEach(p => {\r\n                if (p.x === i && p.y === j) \r\n                    imgUrl = p.image\r\n            })\r\n            board.push(<Tile number={number} key={xAxis[i]+yAxis[j]} image={imgUrl}/>)\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div className=\"board\" onMouseDown={e => selectPiece(e)} onMouseMove={e => movePiece(e)} onMouseUp={e => releasePiece(e)} ref={chessBoardRule}>\r\n            {board}\r\n        </div>\r\n    )\r\n}\r\n","export default class Rules{\r\n\r\n    isAnyPieceBetween = (x, y, boardState, type, px, py) => {\r\n        \r\n        if(type === \"rook\" || type === \"queen\"){\r\n            if(px > x ){\r\n                for(let prevX = px-1; prevX > x; prevX--){\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === y)\r\n                    if(betweenPiece)\r\n                        return true\r\n                }\r\n            }else if(px < x ){\r\n                for(let prevX = px+1; prevX < x; prevX++ ) {\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === y)\r\n                    if(betweenPiece)\r\n                        return true\r\n                }\r\n            }\r\n            if(py > y ){ \r\n                for(let prevY = py-1; prevY > y; prevY--){\r\n                    const betweenPiece = boardState.find(p => p.y === prevY && p.x === x)\r\n                    if(betweenPiece)\r\n                        return true\r\n                }\r\n            }else if(py < y ){ \r\n                for(let prevY = py+1; prevY < y; prevY++ ) {\r\n                    const betweenPiece = boardState.find(p => p.y === prevY && p.x === x)\r\n                    if(betweenPiece)\r\n                        return true\r\n                }\r\n            }\r\n        }else if(type === \"bishop\" || type === \"queen\"){\r\n            if(px > x && py > y){\r\n                for(let prevX = px - 1,prevY = py - 1;prevX > x && prevY > y; ){\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === prevY)\r\n                    if(betweenPiece)\r\n                        return true\r\n                    prevX--\r\n                    prevY--\r\n                }\r\n            }else if(px < x && py > y){\r\n                for(let prevX = px + 1,prevY = py - 1;prevX < x && prevY > y; ){\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === prevY)\r\n                    if(betweenPiece)\r\n                        return true\r\n                    prevX++\r\n                    prevY--\r\n                }\r\n            }else if(px > x && py < y){\r\n                for(let prevX = px - 1,prevY = py + 1;prevX > x && prevY < y; ){\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === prevY)\r\n                    if(betweenPiece)\r\n                        return true\r\n                    prevX--\r\n                    prevY++\r\n                }\r\n            }else{\r\n                for(let prevX = px + 1,prevY = py + 1;prevX < x && prevY < y ;){\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === prevY)\r\n                    if(betweenPiece)\r\n                        return true\r\n                    prevX++\r\n                    prevY++\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    isSquareOccupied = (x, y, boardState) => {\r\n        const piece = boardState.find(p => p.x === x && p.y === y)\r\n        if(piece)\r\n            return true\r\n        else\r\n            return false\r\n    }\r\n\r\n    isEnPassant = (prevX, prevY, x, y, type, color, boardState) => {\r\n        if(type === \"pawn\"){\r\n            const direction = color === \"w\" ? 1 : -1\r\n            if((x - prevX === -1 || x - prevX === 1) && y - prevY === direction){\r\n                const piece = boardState.find(p => p.x === x && p.y === y - direction && p.enPassant)\r\n                if(piece)\r\n                    return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    isOpponent = (x , y , boardState, color) => {\r\n        const piece = boardState.find(p => p.x === x && p.y === y && p.color !== color)\r\n        if(piece)\r\n            return true\r\n        else\r\n            return false\r\n    }\r\n\r\n    validMove = (prevX, prevY, x, y, type, color, boardState) => {\r\n        if (type === \"pawn\") {\r\n            const firstRow = (color === \"w\") ? 1 : 6\r\n            const direction = (color === \"w\") ? 1 : -1\r\n            if(prevX === x && prevY === firstRow && y - prevY === 2 * direction){\r\n                if(!this.isSquareOccupied(x , y , boardState) && !this.isSquareOccupied(x , y - direction, boardState))\r\n                    return true\r\n            }else if(prevX === x && y - prevY === direction){\r\n                if(!this.isSquareOccupied(x , y , boardState))\r\n                    return true\r\n            }else if(x - prevX === 1 && y - prevY === direction){\r\n                if(this.isOpponent(x , y , boardState , color))\r\n                    return true\r\n            }else if(x - prevX === - 1 && y - prevY === direction){\r\n                if(this.isOpponent(x , y , boardState , color))\r\n                    return true\r\n            }   \r\n        }\r\n\r\n        else if (type === \"bishop\") {\r\n            if (Math.abs(prevX - x) === Math.abs(prevY - y)) {\r\n                if(!this.isAnyPieceBetween(x, y, boardState, type, prevX, prevY)){\r\n                    if(!this.isSquareOccupied(x , y , boardState))\r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n        }\r\n\r\n        else if (type === \"rook\") {\r\n            if ((prevX !== x && prevY === y) || (prevX === x && prevY !== y)) {\r\n                if(!this.isAnyPieceBetween(x, y, boardState, type, prevX, prevY)){\r\n                    if(!this.isSquareOccupied(x , y, boardState))                    \r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n        }\r\n        \r\n        else if(type === \"knight\"){\r\n            if (prevX - x === 2 || prevX - x === -2) {\r\n                if(prevY - y === 1 || prevY - y === -1){\r\n                    if(!this.isSquareOccupied(x , y, boardState))\r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }else if (prevY - y === 2 || prevY - y === -2) {\r\n                if(prevX - x === 1 || prevX - x === -1){\r\n                    if(!this.isSquareOccupied(x , y, boardState))\r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n        }\r\n\r\n        else if(type === \"queen\"){\r\n            if(Math.abs(x - prevX) === Math.abs(y - prevY)){\r\n                if(!this.isAnyPieceBetween(x, y, boardState, type, prevX, prevY)){\r\n                    if(!this.isSquareOccupied(x , y ,boardState))\r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n            else if((prevX !== x && prevY === y) || (prevX === x && prevY !== y)) {\r\n                if(!this.isAnyPieceBetween(x, y, boardState, type, prevX, prevY)){\r\n                    if(!this.isSquareOccupied(x , y, boardState))                    \r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n        }\r\n\r\n        else if(type === \"king\"){\r\n            if(prevX - x === 1 || x - prevX === 1){\r\n                if(!this.isSquareOccupied(x , y, boardState))\r\n                    return true\r\n                else if(this.isOpponent(x, y, boardState ,color))\r\n                    return true\r\n            }\r\n            if(prevY - y === 1 || y - prevY === 1){\r\n                if(!this.isSquareOccupied(x , y, boardState))\r\n                    return true\r\n                else if(this.isOpponent(x, y, boardState ,color))\r\n                    return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport { Link } from 'react-router-dom'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { joinRoom, createRoom,socket} from './Socketio'\r\n\r\nclass Room extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            gameId : \"\"\r\n        }\r\n        this.join = this.join.bind(this)\r\n        this.create = this.create.bind(this)\r\n        this.id = React.createRef(null)\r\n    }\r\n    create = () => {\r\n        createRoom()\r\n        socket.on('generateId', gameId => {\r\n            this.setState({gameId: gameId})   \r\n        })\r\n        \r\n    }\r\n    join = () => {\r\n        const id = joinRoom(this.id.current.value)\r\n        this.setState({gameId : id})\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <Jumbotron className=\"text-center\">\r\n                    <h1>Welcome to Chess</h1>\r\n                    <h2>\r\n                        <Button variant=\"success\" className=\"w-100\" onClick={this.create}>Create Room</Button>\r\n                    </h2>\r\n                    <div>{this.state.gameId}</div>\r\n                    <Link to={this.state.gameId ? \"/game\" : \"/\"}>\r\n                        <h2>\r\n                            <Button variant=\"primary\" className=\"w-100\" onClick={this.join}>Join Room</Button>\r\n                        </h2>\r\n                    </Link>\r\n                    <input type=\"text\" className=\"w-100\" ref={this.id}/>\r\n                </Jumbotron>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Room","import React from 'react'\nimport {ChessBoard} from './components/ChessBoard'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Room from './components/Room'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={window.location.pathname || ''}>\n        <Switch>\n          <Route exact path=\"/\" component={Room}/>\n          <Route path=\"/game\" component={ChessBoard}/>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}