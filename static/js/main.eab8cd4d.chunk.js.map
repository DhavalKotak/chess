{"version":3,"sources":["components/Tile/Tile.js","components/Socketio.js","components/ChessBoard.js","components/Rules.js","components/Room.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","number","className","image","style","backgroundImage","color","socket","io","on","board","rules","isAnyPieceBetweenLinear","x","y","boardState","type","px","py","prevX","find","p","prevY","isAnyPieceBetweenAcross","isSquareOccupied","isEnPassant","enPassant","isOpponent","castling","castle","empty","i","validMove","piece","Math","abs","xAxis","yAxis","initialBoard","push","ChessBoard","newBoard","setPieces","changeTurn","turn","useState","currentPiece","setCurrentPiece","boardX","setGridX","boardY","setGridY","pieces","chessBoardRule","useRef","releasePiece","e","chessrule","current","floor","clientX","offsetLeft","clientWidth","ceil","clientY","offsetTop","playerPiece","newPieces","reduce","result","id","window","sessionStorage","getItem","emit","rook","position","removeProperty","j","imgUrl","undefined","forEach","length","onMouseDown","target","classList","contains","clientHeight","top","left","selectPiece","onMouseMove","minWidth","minHeight","maxWidth","maxHeight","movePiece","onMouseUp","ref","Room","create","gameId","setState","join","setItem","joinRoom","value","state","bind","React","createRef","Fragment","Jumbotron","Button","variant","onClick","this","to","Component","App","basename","location","pathname","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eab8cd4d.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../../index.css'\r\n\r\nexport const Tile = (props) => {\r\n    if(props.number % 2 === 0)\r\n        return (\r\n            <div className=\"tile black-tiles\">\r\n                {props.image && <div style={{backgroundImage: `url(${props.image})`}} className={`piece ${props.color}`}></div>}\r\n            </div>\r\n        )\r\n    else\r\n        return (\r\n            <div className=\"tile white-tiles\">\r\n                {props.image && <div style={{backgroundImage: `url(${props.image})`}} className={`piece ${props.color}`}></div>}\r\n            </div>\r\n        )\r\n}","import {io} from 'socket.io-client'\r\nexport const socket = io(\"https://react-chess-backend.herokuapp.com/\")\r\n\r\nsocket.on('updateBoard', board => {\r\n    return board\r\n})\r\n\r\nexport const createRoom = () => {\r\n    let id = \"\"\r\n    socket.emit('createRoom',id) \r\n}\r\n\r\nexport const joinRoom = id => {\r\n    window.sessionStorage.setItem(\"gameId\",id)\r\n    socket.emit('join',id)\r\n    return id\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport { Tile } from './Tile/Tile'\r\nimport {socket} from './Socketio'\r\nimport Rules from './Rules'\r\n\r\nconst rules = new Rules()\r\nconst xAxis = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\r\nconst yAxis = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\r\n\r\nconst initialBoard = []\r\nfor(let i = 0; i < 2; i++){\r\n    let color = (i === 0) ? \"w\" : \"b\"\r\n    let y = (i === 0) ? 0 : 7\r\n    initialBoard.push({image: `img/${color}-king.png`, x: 4, y: y, type: \"king\" , color, castle: true})\r\n    initialBoard.push({image: `img/${color}-queen.png`, x: 3, y: y , type: \"queen\" , color})\r\n    initialBoard.push({image: `img/${color}-bishop.png`, x: 5, y: y, type: \"bishop\" , color})\r\n    initialBoard.push({image: `img/${color}-bishop.png`, x: 2, y: y, type: \"bishop\" , color})\r\n    initialBoard.push({image: `img/${color}-knight.png`, x: 6, y: y , type: \"knight\" , color})\r\n    initialBoard.push({image: `img/${color}-knight.png`, x: 1, y: y , type: \"knight\", color})\r\n    initialBoard.push({image: `img/${color}-rook.png`, x: 7, y: y , type: \"rook\" , color})\r\n    initialBoard.push({image: `img/${color}-rook.png`, x: 0, y: y , type: \"rook\" , color})\r\n}\r\nfor(let i = 0; i < 8; i++)\r\n    initialBoard.push({image: \"img/b-pawn.png\" , x: i, y: 6 ,type: \"pawn\", color: \"b\"})\r\nfor(let i = 0; i < 8; i++)\r\n    initialBoard.push({image: \"img/w-pawn.png\" , x: i, y: 1,type: \"pawn\" , color: \"w\"})\r\n\r\nexport const ChessBoard = () => {\r\n    socket.on('updateBoard', newBoard => {\r\n        setPieces(newBoard)\r\n        changeTurn((turn === \"w\") ? \"b\" : \"w\")\r\n    })\r\n    const [currentPiece, setCurrentPiece] = useState(null)\r\n    const [boardX, setGridX] = useState(0)\r\n    const [boardY ,setGridY] = useState(0)\r\n    const [pieces, setPieces] = useState(initialBoard)\r\n    const [turn, changeTurn] = useState(\"w\")\r\n    const chessBoardRule = useRef(null)\r\n    const selectPiece = e => {\r\n        const chessrule = chessBoardRule.current\r\n        if(e.target.classList.contains(\"piece\") && chessrule && e.target.classList.contains(`${turn}`)){\r\n            setGridX(Math.floor((e.clientX - chessrule.offsetLeft)/(chessrule.clientWidth/8)))\r\n            setGridY(Math.abs(Math.ceil((e.clientY - chessrule.offsetTop - chessrule.clientWidth)/(chessrule.clientWidth/8))))\r\n            const x = e.clientX - e.target.clientWidth/2\r\n            const y = e.clientY - e.target.clientHeight/2\r\n            e.target.style.position = \"absolute\"\r\n            e.target.style.top = `${y}px`\r\n            e.target.style.left = `${x}px`\r\n        }else{\r\n            releasePiece(e)\r\n        }\r\n        setCurrentPiece(e.target)\r\n    }\r\n    \r\n    const movePiece = e => {\r\n        const chessrule = chessBoardRule.current\r\n        if(currentPiece && currentPiece.classList.contains(\"piece\") && chessrule && e.target.classList.contains(`${turn}`)){\r\n            const minWidth = chessrule.offsetLeft\r\n            const minHeight = chessrule.offsetTop\r\n            const maxWidth = chessrule.clientWidth + chessrule.offsetLeft - chessrule.clientWidth/8\r\n            const maxHeight = chessrule.clientHeight + chessrule.offsetTop - chessrule.clientHeight/8\r\n            const x = e.clientX - e.target.clientWidth/2\r\n            const y = e.clientY - e.target.clientHeight/2\r\n            currentPiece.style.position = \"absolute\"\r\n            if(x < minWidth)\r\n                currentPiece.style.left = `${minWidth}px`\r\n            else if (x > maxWidth)\r\n                currentPiece.style.left = `${maxWidth}px`\r\n            else \r\n                currentPiece.style.left = `${x}px`\r\n            if(y < minHeight)\r\n                currentPiece.style.top = `${minHeight}px`\r\n            else if (y > maxHeight) \r\n                currentPiece.style.top = `${maxHeight}px`\r\n            else \r\n                currentPiece.style.top = `${y}px`\r\n        }\r\n    }\r\n    \r\n    const releasePiece = e => {\r\n        const chessrule = chessBoardRule.current\r\n        if(currentPiece && chessrule){\r\n            const x = Math.floor((e.clientX - chessrule.offsetLeft)/(chessrule.clientWidth/8))\r\n            const y = Math.abs(Math.ceil((e.clientY - chessrule.offsetTop - chessrule.clientWidth)/(chessrule.clientWidth/8)))\r\n            const playerPiece = pieces.find(p => p.x === boardX && p.y === boardY)\r\n            if(playerPiece){\r\n                const validMove = rules.validMove(boardX, boardY, x, y, playerPiece.type, playerPiece.color, pieces,playerPiece)\r\n                const enPassant = rules.isEnPassant(boardX, boardY, x, y, playerPiece.type, playerPiece.color, pieces)\r\n                const castling = rules.castling(x, y, boardX,boardY, pieces, playerPiece.color, playerPiece.castle)\r\n\r\n                if(enPassant && playerPiece.color === turn){\r\n                    const newPieces = pieces.reduce((result, piece) => {\r\n                        if(piece.x === boardX && piece.y === boardY){\r\n                            piece.enPassant = false\r\n                            piece.x = x\r\n                            piece.y = y\r\n                            result.push(piece)\r\n                        }else if(!(piece.x === x && piece.y === y - 1)){\r\n                            if(piece.type === \"pawn\")\r\n                                    piece.enPassant = false\r\n                                result.push(piece)\r\n                        }\r\n                        return result\r\n                    },[])\r\n                    setPieces(newPieces)\r\n                    changeTurn((turn === \"w\") ? \"b\" : \"w\")\r\n                    const id = window.sessionStorage.getItem(\"gameId\")\r\n                    socket.emit('move', id,newPieces)                        \r\n                }else if(validMove && playerPiece.color === turn) {\r\n                        const newPieces = pieces.reduce((result, piece) => {\r\n                            if (piece.y === boardY && piece.x === boardX) {\r\n                                if(boardY - y === -2 && piece.type === \"pawn\")\r\n                                    piece.enPassant = true\r\n                                else \r\n                                    piece.enPassant = false\r\n                                piece.x = x\r\n                                piece.y = y\r\n                                if(piece.type === \"pawn\" &&  piece.y === 7){\r\n                                    piece.type = \"queen\"\r\n                                    piece.image = `img/${piece.color}-queen.png`\r\n                                }\r\n                                result.push(piece)   \r\n                            }else if(!(piece.x === x && piece.y === y)){\r\n                                if(piece.type === \"pawn\")\r\n                                    piece.enPassant = false\r\n                                result.push(piece)\r\n                            }\r\n                            return result\r\n                        },[])\r\n                        setPieces(newPieces)\r\n                        changeTurn((turn === \"w\") ? \"b\" : \"w\")        \r\n                        const id = window.sessionStorage.getItem(\"gameId\")\r\n                        socket.emit('move', id,newPieces)\r\n                        \r\n                }else if(castling && playerPiece.color === turn){\r\n                        const newPieces = pieces.reduce((result, piece) => {\r\n                            if(piece.x === boardX && piece.y === boardY){\r\n                                piece.x = x\r\n                                piece.y = y\r\n                                piece.castle = false\r\n                                result.push(piece)\r\n                                if(piece.x === 6){\r\n                                    let rook = result.find(p => p.x === 7 && p.y === y)\r\n                                    rook.x = 5\r\n                                    result.push(rook)\r\n                                }else if(piece.x === 2 ){\r\n                                    let rook = result.find(p => p.x === 0 && p.y === y)\r\n                                    rook.x = 3\r\n                                    result.push(rook)\r\n                                }                                \r\n                            }\r\n                            return result\r\n                        },pieces)\r\n                        setPieces(newPieces)\r\n                        changeTurn((turn === \"w\") ? \"b\" : \"w\")\r\n                        const id = window.sessionStorage.getItem(\"gameId\")\r\n                        socket.emit('move', id,newPieces)\r\n                }else{\r\n                    currentPiece.style.position = \"relative\"\r\n                    currentPiece.style.removeProperty(\"top\")\r\n                    currentPiece.style.removeProperty(\"left\")\r\n                }\r\n            }\r\n            setCurrentPiece(null)\r\n        }\r\n    }\r\n\r\n    const board = []\r\n    for(let j = yAxis.length - 1; j >= 0; j--){\r\n        for(let i = 0; i < xAxis.length; i++){\r\n            const number = i + j + 2\r\n            let imgUrl = undefined, color = \"\"\r\n            pieces.forEach(p => {\r\n                if (p.x === i && p.y === j) {\r\n                    imgUrl = p.image\r\n                    color = p.color\r\n                }      \r\n            })\r\n            board.push(<Tile number={number} key={xAxis[i]+yAxis[j]} image={imgUrl} color={color}/>)\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div className=\"board\" onMouseDown={e => selectPiece(e)} onMouseMove={e => movePiece(e)} onMouseUp={e => releasePiece(e)} ref={chessBoardRule}>\r\n            {board}\r\n        </div>\r\n    )\r\n}\r\n","export default class Rules{\r\n\r\n    isAnyPieceBetweenLinear = (x, y, boardState, type, px, py) => {\r\n        \r\n        if(type === \"rook\" || type === \"queen\"){\r\n            if(px > x ){\r\n                for(let prevX = px-1; prevX > x; prevX--){\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === y)\r\n                    if(betweenPiece)\r\n                        return true\r\n                }\r\n            }else if(px < x ){\r\n                for(let prevX = px+1; prevX < x; prevX++ ) {\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === y)\r\n                    if(betweenPiece)\r\n                        return true\r\n                }\r\n            }\r\n            if(py > y ){ \r\n                for(let prevY = py-1; prevY > y; prevY--){\r\n                    const betweenPiece = boardState.find(p => p.y === prevY && p.x === x)\r\n                    if(betweenPiece)\r\n                        return true\r\n                }\r\n            }else if(py < y ){ \r\n                for(let prevY = py+1; prevY < y; prevY++ ) {\r\n                    const betweenPiece = boardState.find(p => p.y === prevY && p.x === x)\r\n                    if(betweenPiece)\r\n                        return true\r\n                }\r\n            }\r\n        } \r\n        return false\r\n    }\r\n\r\n    isAnyPieceBetweenAcross = (x, y, boardState, type, px, py) => {\r\n        \r\n        if(type === \"bishop\" || type === \"queen\"){\r\n            if(px > x && py > y){\r\n                for(let prevX = px - 1,prevY = py - 1;prevX > x && prevY > y; ){\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === prevY)\r\n                    if(betweenPiece)\r\n                        return true\r\n                    prevX--\r\n                    prevY--\r\n                }\r\n            }else if(px < x && py > y){\r\n                for(let prevX = px + 1,prevY = py - 1;prevX < x && prevY > y; ){\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === prevY)\r\n                    if(betweenPiece)\r\n                        return true\r\n                    prevX++\r\n                    prevY--\r\n                }\r\n            }else if(px > x && py < y){\r\n                for(let prevX = px - 1,prevY = py + 1;prevX > x && prevY < y; ){\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === prevY)\r\n                    if(betweenPiece)\r\n                        return true\r\n                    prevX--\r\n                    prevY++\r\n                }\r\n            }else{\r\n                for(let prevX = px + 1,prevY = py + 1;prevX < x && prevY < y ;){\r\n                    const betweenPiece = boardState.find(p => p.x === prevX && p.y === prevY)\r\n                    if(betweenPiece)\r\n                        return true\r\n                    prevX++\r\n                    prevY++\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    isSquareOccupied = (x, y, boardState) => {\r\n        const piece = boardState.find(p => p.x === x && p.y === y)\r\n        if(piece)\r\n            return true\r\n        else\r\n            return false\r\n    }\r\n\r\n    isEnPassant = (prevX, prevY, x, y, type, color, boardState) => {\r\n        if(type === \"pawn\"){\r\n            if((x - prevX === -1 || x - prevX === 1) && y - prevY === 1){\r\n                const piece = boardState.find(p => p.x === x && p.y === y - 1 && p.enPassant)\r\n                if(piece)\r\n                    return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    isOpponent = (x , y , boardState, color) => {\r\n        const piece = boardState.find(p => p.x === x && p.y === y && p.color !== color)\r\n        if(piece)\r\n            return true\r\n        else\r\n            return false\r\n    }\r\n\r\n    castling = (x, y, prevX, prevY, boardState, color, castle) => {\r\n        if(castle){\r\n            if(prevX === 4 && x === 6){\r\n                if((color === \"w\" && y === 0) || (color === \"b\" && prevY === 7)){\r\n                    let empty = true\r\n                    for(let i = prevX + 1; i < 7;i++){\r\n                        empty = this.isSquareOccupied(i,y,boardState)\r\n                        if(empty)\r\n                            break\r\n                    }\r\n                    if(!empty){\r\n                        let rook = boardState.find(p => p.x === 7 && p.y === y && p.type === \"rook\" && p.color === color)\r\n                        if(rook)\r\n                            return true\r\n                    }\r\n                }\r\n            }\r\n            if(prevX === 4 && x === 2){\r\n                if((color === \"w\" && prevY === 0) || (color === \"b\" && prevY === 7)){\r\n                    let empty = true\r\n                    for(let i = prevX - 1; i > 0;i--){\r\n                        empty = this.isSquareOccupied(i,y,boardState)\r\n                        if(empty)\r\n                            break\r\n                    }\r\n                    if(!empty){\r\n                        let rook = boardState.find(p => p.x === 0 && p.y === y && p.type === \"rook\" && p.color === color)\r\n                        if(rook)\r\n                            return true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }    \r\n\r\n    validMove = (prevX, prevY, x, y, type, color, boardState, piece) => {\r\n        if (type === \"pawn\") {\r\n            if(prevX === x && prevY === 1 && y - prevY === 2 ){\r\n                if(!this.isSquareOccupied(x , y , boardState) && !this.isSquareOccupied(x , y - 1, boardState))\r\n                    return true\r\n            }else if(prevX === x && y - prevY === 1){\r\n                if(!this.isSquareOccupied(x , y , boardState))\r\n                    return true\r\n            }else if(x - prevX === 1 && y - prevY === 1){\r\n                if(this.isOpponent(x , y , boardState , color))\r\n                    return true\r\n            }else if(x - prevX === - 1 && y - prevY === 1){\r\n                if(this.isOpponent(x , y , boardState , color))\r\n                    return true\r\n            }   \r\n        }\r\n\r\n        else if (type === \"bishop\") {\r\n            if (Math.abs(prevX - x) === Math.abs(prevY - y)) {\r\n                if(!this.isAnyPieceBetweenAcross(x, y, boardState, type, prevX, prevY)){\r\n                    if(!this.isSquareOccupied(x , y , boardState))\r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n        }\r\n\r\n        else if (type === \"rook\") {\r\n            if ((prevX !== x && prevY === y) || (prevX === x && prevY !== y)) {\r\n                if(!this.isAnyPieceBetweenLinear(x, y, boardState, type, prevX, prevY)){\r\n                    if(!this.isSquareOccupied(x , y, boardState))                    \r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n        }\r\n        \r\n        else if(type === \"knight\"){\r\n            if (prevX - x === 2 || prevX - x === -2) {\r\n                if(prevY - y === 1 || prevY - y === -1){\r\n                    if(!this.isSquareOccupied(x , y, boardState))\r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }else if (prevY - y === 2 || prevY - y === -2) {\r\n                if(prevX - x === 1 || prevX - x === -1){\r\n                    if(!this.isSquareOccupied(x , y, boardState))\r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n        }\r\n\r\n        else if(type === \"queen\"){\r\n            if(Math.abs(x - prevX) === Math.abs(y - prevY)){\r\n                if(!this.isAnyPieceBetweenAcross(x, y, boardState, type, prevX, prevY)){\r\n                    if(!this.isSquareOccupied(x , y ,boardState))\r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n            else if((prevX !== x && prevY === y) || (prevX === x && prevY !== y)) {\r\n                if(!this.isAnyPieceBetweenLinear(x, y, boardState, type, prevX, prevY)){\r\n                    if(!this.isSquareOccupied(x , y, boardState))                    \r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n        }\r\n\r\n        else if(type === \"king\"){\r\n            if(prevX === x || prevY === y){\r\n                if(Math.abs((prevX + prevY) - (x + y)) < 2){\r\n                    if(!this.isSquareOccupied(x , y, boardState)){\r\n                        piece.castle = false\r\n                        return true\r\n                    } \r\n                }\r\n            }else {\r\n                if(Math.abs((prevX + prevY) - (x + y)) <= 2){\r\n                    if(!this.isSquareOccupied(x , y, boardState)){\r\n                        piece.castle = false\r\n                        return true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport { Link } from 'react-router-dom'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { joinRoom, createRoom,socket} from './Socketio'\r\n\r\nclass Room extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            gameId : \"\"\r\n        }\r\n        this.join = this.join.bind(this)\r\n        this.create = this.create.bind(this)\r\n        this.id = React.createRef(null)\r\n    }\r\n    create = () => {\r\n        createRoom()\r\n        socket.on('generateId', gameId => {\r\n            this.setState({gameId: gameId})   \r\n        })\r\n        \r\n    }\r\n    join = () => {\r\n        const id = joinRoom(this.id.current.value)\r\n        this.setState({gameId : id})\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <Jumbotron className=\"text-center\">\r\n                    <h1>Welcome to Chess</h1>\r\n                    <h2>\r\n                        <Button variant=\"success\" className=\"w-100\" onClick={this.create}>Create Room</Button>\r\n                    </h2>\r\n                    <div>{this.state.gameId}</div>\r\n                    <Link to={this.state.gameId ? \"/game\" : \"/\"}>\r\n                        <h2>\r\n                            <Button variant=\"primary\" className=\"w-100\" onClick={this.join}>Join Room</Button>\r\n                        </h2>\r\n                    </Link>\r\n                    <input type=\"text\" className=\"w-100\" ref={this.id}/>\r\n                </Jumbotron>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Room","import React from 'react'\nimport {ChessBoard} from './components/ChessBoard'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Room from './components/Room'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={window.location.pathname || ''}>\n        <Switch>\n          <Route exact path=\"/\" component={Room}/>\n          <Route path=\"/game\" component={ChessBoard}/>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}