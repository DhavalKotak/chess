{"version":3,"sources":["components/Tile/Tile.js","components/Socketio.js","components/ChessBoard.js","components/Rules.js","components/Room.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","number","className","image","style","backgroundImage","socket","io","on","board","rules","isSquareOccupied","x","y","boardState","find","p","isEnPassant","prevX","prevY","type","color","direction","enPassant","isOpponent","validMove","Math","abs","xAxis","yAxis","turn","initialBoard","i","push","ChessBoard","newBoard","setPieces","useState","currentPiece","setCurrentPiece","boardX","setGridX","boardY","setGridY","pieces","chessBoardRule","useRef","j","piece","imgUrl","undefined","length","onMouseDown","e","chessrule","current","target","classList","contains","floor","clientX","offsetLeft","clientWidth","ceil","clientY","offsetTop","clientHeight","position","top","left","selectPiece","onMouseMove","minWidth","minHeight","maxWidth","maxHeight","movePiece","onMouseUp","playerPiece","newPieces","reduce","result","id","window","sessionStorage","getItem","emit","removeProperty","releasePiece","ref","Room","create","gameId","setState","join","setItem","joinRoom","value","state","bind","React","createRef","Fragment","Jumbotron","Button","variant","onClick","this","to","Component","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9aced12.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../../index.css'\r\n\r\nexport const Tile = (props) => {\r\n    if(props.number % 2 === 0)\r\n        return (\r\n            <div className=\"tile black-tiles\">\r\n                {props.image && <div style={{backgroundImage: `url(${props.image})`}} className=\"piece\"></div>}\r\n            </div>\r\n        )\r\n    else\r\n        return (\r\n            <div className=\"tile white-tiles\">\r\n                {props.image && <div style={{backgroundImage: `url(${props.image})`}} className=\"piece\"></div>}\r\n            </div>\r\n        )\r\n}","import {io} from 'socket.io-client'\r\nexport const socket = io(\"https://react-chess-backend.herokuapp.com/\")\r\n\r\nsocket.on('updateBoard', board => {\r\n    return board\r\n})\r\n\r\nexport const createRoom = () => {\r\n    let id = \"\"\r\n    socket.emit('createRoom',id) \r\n}\r\n\r\nexport const joinRoom = id => {\r\n    window.sessionStorage.setItem(\"gameId\",id)\r\n    socket.emit('join',id)\r\n    return id\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport { Tile } from './Tile/Tile'\r\nimport {socket} from './Socketio'\r\nimport Rules from './Rules'\r\n\r\nconst rules = new Rules()\r\nconst xAxis = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\r\nconst yAxis = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\r\nlet turn = 1\r\n\r\nconst initialBoard = []\r\nfor(let i = 0; i < 2; i++){\r\n    let color = (i === 0) ? \"w\" : \"b\"\r\n    let y = (i === 0) ? 0 : 7\r\n    initialBoard.push({image: `img/${color}-king.png`, x: 4, y: y, type: \"king\" , color})\r\n    initialBoard.push({image: `img/${color}-queen.png`, x: 3, y: y , type: \"queen\" , color})\r\n    initialBoard.push({image: `img/${color}-bishop.png`, x: 5, y: y, type: \"bishop\" , color})\r\n    initialBoard.push({image: `img/${color}-bishop.png`, x: 2, y: y, type: \"bishop\" , color})\r\n    initialBoard.push({image: `img/${color}-knight.png`, x: 6, y: y , type: \"knight\" , color})\r\n    initialBoard.push({image: `img/${color}-knight.png`, x: 1, y: y , type: \"knight\", color})\r\n    initialBoard.push({image: `img/${color}-rook.png`, x: 7, y: y , type: \"rook\" , color})\r\n    initialBoard.push({image: `img/${color}-rook.png`, x: 0, y: y , type: \"rook\" , color})\r\n}\r\nfor(let i = 0; i < 9; i++)\r\n    initialBoard.push({image: \"img/b-pawn.png\" , x: i, y: 6 ,type: \"pawn\", color: \"b\"})\r\nfor(let i = 0; i < 9; i++)\r\n    initialBoard.push({image: \"img/w-pawn.png\" , x: i, y: 1,type: \"pawn\" , color: \"w\"})\r\n\r\nexport const ChessBoard = () => {\r\n    socket.on('updateBoard', newBoard => {\r\n        setPieces(newBoard)\r\n    })\r\n    const [currentPiece, setCurrentPiece] = useState(null)\r\n    const [boardX, setGridX] = useState(0)\r\n    const [boardY ,setGridY] = useState(0)\r\n    const [pieces, setPieces] = useState(initialBoard)\r\n    const chessBoardRule = useRef(null)\r\n    const selectPiece = e => {\r\n        const chessrule = chessBoardRule.current\r\n        if(e.target.classList.contains(\"piece\") && chessrule){\r\n            setGridX(Math.floor((e.clientX - chessrule.offsetLeft)/(chessrule.clientWidth/8)))\r\n            setGridY(Math.abs(Math.ceil((e.clientY - chessrule.offsetTop - 800)/(chessrule.clientWidth/8))))\r\n            const x = e.clientX - e.target.clientWidth/2\r\n            const y = e.clientY - e.target.clientHeight/2\r\n            e.target.style.position = \"absolute\"\r\n            e.target.style.top = `${y}px`\r\n            e.target.style.left = `${x}px`\r\n        }\r\n        setCurrentPiece(e.target)\r\n    }\r\n    \r\n    const movePiece = e => {\r\n        const chessrule = chessBoardRule.current\r\n        if(currentPiece && currentPiece.classList.contains(\"piece\") && chessrule && currentPiece.color === ((turn % 2) === 0 ? \"w\" : \"b\")){\r\n            turn ++\r\n            const minWidth = chessrule.offsetLeft\r\n            const minHeight = chessrule.offsetTop\r\n            const maxWidth = chessrule.clientWidth + chessrule.offsetLeft - chessrule.clientWidth/8\r\n            const maxHeight = chessrule.clientHeight + chessrule.offsetTop - chessrule.clientHeight/8\r\n            const x = e.clientX - e.target.clientWidth/2\r\n            const y = e.clientY - e.target.clientHeight/2\r\n            currentPiece.style.position = \"absolute\"\r\n            if(x < minWidth)\r\n                currentPiece.style.left = `${minWidth}px`\r\n            else if (x > maxWidth)\r\n                currentPiece.style.left = `${maxWidth}px`\r\n            else \r\n                currentPiece.style.left = `${x}px`\r\n            if(y < minHeight)\r\n                currentPiece.style.top = `${minHeight}px`\r\n            else if (y > maxHeight) \r\n                currentPiece.style.top = `${maxHeight}px`\r\n            else \r\n                currentPiece.style.top = `${y}px`\r\n        }\r\n    }\r\n    \r\n    const releasePiece = e => {\r\n        const chessrule = chessBoardRule.current\r\n        if(currentPiece && chessrule){\r\n            const x = Math.floor((e.clientX - chessrule.offsetLeft)/(chessrule.clientWidth/8))\r\n            const y = Math.abs(Math.ceil((e.clientY - chessrule.offsetTop - 800)/(chessrule.clientWidth/8)))\r\n            const playerPiece = pieces.find(p => p.x === boardX && p.y === boardY)\r\n\r\n            if(playerPiece && playerPiece.color === ((turn % 2) === 0 ? \"w\" : \"b\")){\r\n                const validMove = rules.validMove(boardX, boardY, x, y, playerPiece.type, playerPiece.color, pieces)\r\n                const enPassant = rules.isEnPassant(boardX, boardY, x, y, playerPiece.type, playerPiece.color, pieces)\r\n                const direction = playerPiece.color === \"w\" ? 1 : -1\r\n                \r\n                if(enPassant){\r\n                    const newPieces = pieces.reduce((result, piece) => {\r\n                        if(piece.x === boardX && piece.y === boardY){\r\n                            piece.enPassant = false\r\n                            piece.x = x\r\n                            piece.y = y\r\n                            result.push(piece)\r\n                        }else if(!(piece.x === x && piece.y === y - direction)){\r\n                            if(piece.type === \"pawn\")\r\n                                    piece.enPassant = false\r\n                                result.push(piece)\r\n                        }\r\n                        return result\r\n                    },[])\r\n                    setPieces(newPieces)\r\n                    const id = window.sessionStorage.getItem(\"gameId\")\r\n                    socket.emit('move', id,newPieces)                        \r\n                }else if(validMove) {\r\n                        const newPieces = pieces.reduce((result, piece) => {\r\n                            if (piece.y === boardY && piece.x === boardX) {\r\n                                if(Math.abs(boardY - y) === 2 && piece.type === \"pawn\")\r\n                                    piece.enPassant = true\r\n                                else \r\n                                    piece.enPassant = false\r\n                                piece.x = x\r\n                                piece.y = y\r\n                                result.push(piece)   \r\n                            }else if(!(piece.x === x && piece.y === y)){\r\n                                if(piece.type === \"pawn\")\r\n                                    piece.enPassant = false\r\n                                result.push(piece)\r\n                            }\r\n                            return result\r\n                        },[])\r\n                        if(playerPiece.color === turn % 2 === 0 ? \"b\" : \"w\"){\r\n                            setPieces(newPieces)\r\n                            turn++\r\n                            const id = window.sessionStorage.getItem(\"gameId\")\r\n                            socket.emit('move', id,newPieces)\r\n                        }\r\n                        \r\n                }else{\r\n                    currentPiece.style.position = \"relative\"\r\n                    currentPiece.style.removeProperty(\"top\")\r\n                    currentPiece.style.removeProperty(\"left\")\r\n                }\r\n            }\r\n            setCurrentPiece(null)\r\n        }\r\n    }\r\n\r\n    const board = []\r\n    for(let j = yAxis.length - 1; j >= 0; j--){\r\n        for(let i = 0; i < xAxis.length; i++){\r\n            const number = i + j + 2\r\n            const piece = pieces.find(p => p.x === i && p.y ===j)\r\n            let imgUrl = piece ? piece.image : undefined\r\n            board.push(<Tile number={number} key={xAxis[i]+yAxis[j]} image={imgUrl}/>)\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div className=\"board\" onMouseDown={e => selectPiece(e)} onMouseMove={e => movePiece(e)} onMouseUp={e => releasePiece(e)} ref={chessBoardRule}>\r\n            {board}\r\n        </div>\r\n    )\r\n}\r\n","export default class Rules{\r\n    isSquareOccupied = (x, y, boardState) => {\r\n        const piece = boardState.find(p => p.x === x && p.y === y)\r\n        if(piece)\r\n            return true\r\n        else\r\n            return false\r\n    }\r\n\r\n    isEnPassant = (prevX, prevY, x, y, type, color, boardState) => {\r\n        if(type === \"pawn\"){\r\n            const direction = color === \"w\" ? 1 : -1\r\n            if((x - prevX === -1 || x - prevX === 1) && y - prevY === direction){\r\n                const piece = boardState.find(p => p.x === x && p.y === y - direction && p.enPassant)\r\n                if(piece)\r\n                    return true\r\n            }\r\n        }\r\n        return false\r\n\r\n    }\r\n\r\n    isOpponent = (x , y , boardState, color) => {\r\n        const piece = boardState.find(p => p.x === x && p.y === y && p.color !== color)\r\n        if(piece)\r\n            return true\r\n        else\r\n            return false\r\n    }\r\n\r\n    validMove = (prevX, prevY, x, y, type, color, boardState) => {\r\n        if (type === \"pawn\") {\r\n            const firstRow = (color === \"w\") ? 1 : 6\r\n            const direction = (color === \"w\") ? 1 : -1\r\n            if(prevX === x && prevY === firstRow && y - prevY === 2 * direction){\r\n                if(!this.isSquareOccupied(x , y , boardState) && !this.isSquareOccupied(x , y - direction, boardState))\r\n                    return true\r\n            }else if(prevX === x && y - prevY === direction){\r\n                if(!this.isSquareOccupied(x , y , boardState))\r\n                    return true\r\n            }else if(x - prevX === 1 && y - prevY === direction){\r\n                if(this.isOpponent(x , y , boardState , color))\r\n                    return true\r\n            }else if(x - prevX === - 1 && y - prevY === direction){\r\n                if(this.isOpponent(x , y , boardState , color))\r\n                    return true\r\n            }   \r\n        }\r\n\r\n        else if (type === \"bishop\") {\r\n            if (Math.abs(prevX - x) === Math.abs(prevY - y)) {\r\n                if(!this.isSquareOccupied(x , y , boardState))\r\n                    return true\r\n                else if(this.isOpponent(x, y, boardState ,color))\r\n                    return true\r\n            }\r\n        }\r\n\r\n        else if (type === \"rook\") {\r\n            if ((prevX !== x && prevY === y) || (prevX === x && prevY !== y)) {\r\n                if(!this.isSquareOccupied(x , y, boardState))\r\n                    return true\r\n                else if(this.isOpponent(x, y, boardState ,color))\r\n                    return true\r\n            }\r\n        }\r\n        \r\n        else if(type === \"knight\"){\r\n            if (prevX - x === 2 || prevX - x === -2) {\r\n                if(prevY - y === 1 || prevY - y === -1){\r\n                    if(!this.isSquareOccupied(x , y, boardState))\r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }else if (prevY - y === 2 || prevY - y === -2) {\r\n                if(prevX - x === 1 || prevX - x === -1){\r\n                    if(!this.isSquareOccupied(x , y, boardState))\r\n                        return true\r\n                    else if(this.isOpponent(x, y, boardState ,color))\r\n                        return true\r\n                }\r\n            }\r\n        }\r\n\r\n        else if(type === \"queen\"){\r\n            if(Math.abs(x - prevX) === Math.abs(y - prevY)){\r\n                if(!this.isSquareOccupied(x , y ,boardState))\r\n                    return true\r\n                else if(this.isOpponent(x, y, boardState ,color))\r\n                    return true\r\n            }\r\n            else if((prevX !== x && prevY === y) || (prevX === x && prevY !== y)) {\r\n                if(!this.isSquareOccupied(x , y, boardState))\r\n                    return true\r\n                else if(this.isOpponent(x, y, boardState ,color))\r\n                    return true\r\n            }\r\n        }\r\n\r\n        else if(type === \"king\"){\r\n            if(prevX - x === 1 || x - prevX === 1){\r\n                if(!this.isSquareOccupied(x , y, boardState))\r\n                    return true\r\n                else if(this.isOpponent(x, y, boardState ,color))\r\n                    return true\r\n            }\r\n            if(prevY - y === 1 || y - prevY === 1){\r\n                if(!this.isSquareOccupied(x , y, boardState))\r\n                    return true\r\n                else if(this.isOpponent(x, y, boardState ,color))\r\n                    return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport { Link } from 'react-router-dom'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { joinRoom, createRoom,socket} from './Socketio'\r\n\r\nclass Room extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            gameId : \"\"\r\n        }\r\n        this.join = this.join.bind(this)\r\n        this.create = this.create.bind(this)\r\n        this.id = React.createRef(null)\r\n    }\r\n    create = () => {\r\n        createRoom()\r\n        socket.on('generateId', gameId => {\r\n            this.setState({gameId: gameId})   \r\n        })\r\n        \r\n    }\r\n    join = () => {\r\n        const id = joinRoom(this.id.current.value)\r\n        this.setState({gameId : id})\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <Jumbotron className=\"text-center\">\r\n                    <h1>Welcome to Chess</h1>\r\n                    <h2>\r\n                        <Button variant=\"success\" className=\"w-100\" onClick={this.create}>Create Room</Button>\r\n                    </h2>\r\n                    <div>{this.state.gameId}</div>\r\n                    <Link to={this.state.gameId ? \"/game\" : \"\"}>\r\n                        <h2>\r\n                            <Button variant=\"primary\" className=\"w-100\" onClick={this.join}>Join Room</Button>\r\n                        </h2>\r\n                    </Link>\r\n                    <input type=\"text\" className=\"w-100\" ref={this.id}/>\r\n                </Jumbotron>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Room","import React from 'react'\nimport {ChessBoard} from './components/ChessBoard'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Room from './components/Room'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/chess\" component={Room}/>\n          <Route path=\"/game\" component={ChessBoard}/>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}